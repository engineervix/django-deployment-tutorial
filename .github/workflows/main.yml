name: Continuous Integration

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    branches: ["main"]
    paths-ignore: ["docs/**"]

  push:
    branches: ["main"]
    paths-ignore: ["docs/**"]
    tags:
      - "v*"

jobs:

  # runs all of the steps inside the specified container rather than on the VM host.
  # Because of this the network configuration changes from host based network to a container network.
  linter_isort:
    runs-on: ubuntu-20.04
    container: python:3.10-slim-bullseye

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          pip install -q isort[requirements_deprecated_finder]==5.10.1

      - name: isort
        run: |
          isort . --check-only --profile black

  # runs all of the steps inside the specified container rather than on the VM host.
  # Because of this the network configuration changes from host based network to a container network.
  linter_black:
    runs-on: ubuntu-20.04
    container: python:3.10-slim-bullseye

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          pip install -q black==22.8.0

      - name: black
        run: |
          black . --check

  # runs all of the steps inside the specified container rather than on the VM host.
  # Because of this the network configuration changes from host based network to a container network.
  linter_flake8:
    runs-on: ubuntu-20.04
    container: python:3.10-slim-bullseye

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          pip install -q flake8==5.0.4

      - name: flake8
        run: |
          flake8 mysite

  # runs all of the steps inside the specified container rather than on the VM host.
  # Because of this the network configuration changes from host based network to a container network.
  pytest:
    runs-on: ubuntu-20.04
    needs: [linter_isort,linter_black,linter_flake8]
    container: python:3.10-slim-bullseye

    services:
      redis:
        image: redis:7.0.12
      postgres:
        image: postgres:14.5
        env:
          POSTGRES_DB: test_postgres_db
          POSTGRES_USER: test_postgres_user
          POSTGRES_PASSWORD: custom_pass
        # needed because the postgres container does not provide a healthcheck
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # postgres://user:password@host:port/database
      # The hostname used to communicate with the PostgreSQL service container
      POSTGRES_HOST: postgres
      # The default PostgreSQL port
      POSTGRES_PORT: 5432
      DATABASE_URL: "postgres://test_postgres_user:custom_pass@postgres/test_postgres_db"

    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4

      # https://github.com/actions/runner/issues/652
      # - name: Get pip cache dir
      #   id: pip-cache
      #   run: |
      #     echo "::set-output name=dir::$(pip cache dir)"

      # - name: pip cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ steps.pip-cache.outputs.dir }}
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-

      - name: Install Dependencies
        shell: bash
        run: |

          export DEBIAN_FRONTEND=noninteractive
          ln -fs /usr/share/zoneinfo/Africa/Lusaka /etc/localtime
          dpkg-reconfigure --frontend noninteractive tzdata
          apt-get update -y
          apt-get install -y build-essential curl libpq-dev postgresql-client libjpeg62-turbo-dev zlib1g-dev libwebp-dev libmagic1
          export PGPASSWORD=$POSTGRES_PASSWORD
          export PGUSER=$POSTGRES_USER
          python -VV # Print out python version for debugging
          which python # for debugging
          pip3 install virtualenv
          virtualenv ../venv
          source ../venv/bin/activate
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8
          pip install --upgrade pip
          # pip install pip-tools
          # pip-compile requirements.in
          # pip-sync
          pip install -r requirements-dev.txt
          # curl -sL https://deb.nodesource.com/setup_14.x | bash -
          # apt install nodejs -yqq
          # npm install -g gulp-cli
          # curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
          # echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
          # apt update -q && apt install yarn -yqq
          # yarn install && gulp cp && gulp min
          touch .env
          echo "DJANGO_SECRET_KEY='w+)\^to.j_lopEY&lmMJVa5+L@]GtMxwD=:6-DJe)q[b[iD]dU|q5ldk'" >> .env
          echo "DEBUG=False" >> .env
          echo "ALLOWED_HOSTS=" >> .env
          echo "BASE_URL=www.example.com" >> .env
          ./manage.py collectstatic --ignore scss/ --noinput --clear

      - name: test
        shell: bash
        run: |

          # Note that you have to activate the virtualenv in every step
          # because GitHub actions doesn't preserve the environment
          source ../venv/bin/activate

          # Run system checks
          ./manage.py check

          # Check for missing migrations
          ./manage.py makemigrations --check --noinput

          # Create cache table.
          ./manage.py createcachetable

          # Run back-end tests
          pytest

  # Runs all steps on the VM
  # Creates a GitHub Release when the lint & test jobs succeeds, and only on pushes to tags.
  release:
    needs: [linter_isort,linter_black,linter_flake8,pytest]

    if: needs.pytest.result == 'success' && startsWith( github.ref, 'refs/tags/v' )

    runs-on: ubuntu-20.04

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install invoke colorama tomli
      - name: Get the version
        id: get_version
        run: |
          echo "${{ github.ref }}"
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - name: Generate Release Title
        id: get_release_title
        shell: bash
        run: |
          export TODAY="($(TZ=Africa/Lusaka date --iso))"
          echo ::set-output name=RELEASE_NAME::"${{ steps.get_version.outputs.VERSION }} $TODAY"
      - name: Extract Release Notes
        # This creates a file LATEST_RELEASE_NOTES.md in the parent directory (../)
        shell: bash
        run: |
          invoke get-release-notes
      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_release_title.outputs.RELEASE_NAME }}
          body_path: ../LATEST_RELEASE_NOTES.md

  # deploy_railway:
  #   needs: [linter_isort,linter_black,linter_flake8,pytest]
  #   if: needs.pytest.result == 'success'
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Install Railway
  #       run: npm i -g @railway/cli

  #     - name: Deploy
  #       run: railway up
  #       env:
  #         RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  # deploy_dokku:
  #   needs: [linter_isort,linter_black,linter_flake8,pytest]
  #   if: needs.pytest.result == 'success'
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0

  #     - name: Push to dokku
  #       uses: dokku/github-action@master
  #       with:
  #         # specify the `main` branch as the remote branch to push to
  #         branch: 'main'
  #         git_remote_url: ${{ secrets.GIT_REMOTE_URL }}
  #         ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
